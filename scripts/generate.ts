import path from 'path'
import { Project, InterfaceDeclaration, ScriptTarget } from 'ts-morph'
import replace from 'replace-in-file'

export function parsePath(
  path: string,
  upperFirstCase: boolean | undefined = false
) {
  let pathList = path.replace(/"/g, '').split('/')
  pathList = pathList.reduce(
    (p: string[], c: string) => [...p, ...c.split(':')],
    []
  )
  pathList = pathList.reduce(
    (p: string[], c: string) => [...p, ...c.split('-')],
    []
  )
  if (upperFirstCase) {
    return pathList
      .slice(1)
      .map((p) => p.charAt(0).toUpperCase() + p.slice(1))
      .join('')
  }
  return (
    pathList[1] +
    pathList
      .slice(2)
      .map((p) => p.charAt(0).toUpperCase() + p.slice(1))
      .join('')
  )
}
const sourceFilePath = path.join(__dirname, '../types/swagger.ts')
// const crossSourceFilePath = path.join(__dirname, '../types/crossSwagger.ts')

// 替换 query pageNo pageSize 类型
const options = {
  files: sourceFilePath,
  from: [
    /pageNo\??: string/g,
    /pageSize\??: string/g,
    /ID\?: number/g,
    /ID: number/g,
  ],
  to: ['pageNo: number', 'pageSize: number', 'ID?: string', 'ID: string'],
}
replace.replaceInFileSync(options)

// const crossOptions = {
//   files: crossSourceFilePath,
//   from: [
//     /pageNo\??: string/g,
//     /pageSize\??: string/g,
//     /ID\?: number/g,
//     /ID: number/g,
//   ],
//   to: ['pageNo: number', 'pageSize: number', 'ID?: string', 'ID: string'],
// }
// replace.replaceInFileSync(crossOptions)

const project = new Project({
  compilerOptions: {
    target: ScriptTarget.ESNext,
  },
})

const targetFilePath = path.join(__dirname, '../plugins/api/yapi.ts')
const sourceFile = project.addSourceFileAtPath(sourceFilePath)
const targetFile = project.createSourceFile(targetFilePath, '', {
  overwrite: true,
})

function createApis(node: InterfaceDeclaration) {
  const allKeys = node.getProperties().map((p) => p.getName())

  targetFile.addStatements(`
/**
    * This file was auto-generated by openapi-typescript.
    * Do not make direct changes to the file.
*/`)

  targetFile.addImportDeclaration({
    defaultImport: '{ Api }',
    moduleSpecifier: './api',
  })

  const classDeclaratin = targetFile.addClass({
    name: 'Yapi',
    extends: 'Api',
    isExported: true,
  })
  for (const [index, path] of allKeys.entries()) {
    const typeName = parsePath(path)
    const paramName = parsePath(path, true)
    const methods = node
      .getProperties()
      [index].getType()
      .getProperties()
      .map((p) => p.getName())

    const content = node.getProperties()[index].getType().getText()
    for (const method of methods) {
      let typNameWithMethod = typeName
      if (method !== 'get') {
        typNameWithMethod =
          typeName + method.charAt(0).toUpperCase() + method.slice(1)
      }
      classDeclaratin.addGetAccessor({
        name: typNameWithMethod,
        statements: `return this.ft.path(${path}).method("${method}").create()!`,
      })

      switch (method) {
        case 'get':
          if (content.includes('query')) {
            sourceFile.addTypeAlias({
              name: paramName + 'GetParams',
              type: `paths[${path}]['get']['parameters']['query']`,
              isExported: true,
            })
          } else {
            sourceFile.addTypeAlias({
              name: paramName + 'GetParams',
              type: `paths[${path}]['get']['parameters']`,
              isExported: true,
            })
          }
          sourceFile.addTypeAlias({
            name: paramName,
            type: `paths[${path}]['get']['responses'][200]['schema']['data']`,
            isExported: true,
          })
          break
        case 'post':
          if (content.includes('formData')) {
            sourceFile.addTypeAlias({
              name: paramName + 'PostParams',
              type: `FormData`,
              isExported: true,
            })
          } else {
            sourceFile.addTypeAlias({
              name: paramName + 'PostParams',
              type: `paths[${path}]['post']['parameters']['body']['root']`,
              isExported: true,
            })
            sourceFile.addTypeAlias({
              name: paramName + 'Post',
              type: `paths[${path}]['post']['responses'][200]['schema']['data']`,
              isExported: true,
            })
          }
          break
        case 'put':
          sourceFile.addTypeAlias({
            name: paramName + 'PutParams',
            type: `paths[${path}]['put']['parameters']['body']['root']`,
            isExported: true,
          })
          break
        case 'delete':
          sourceFile.addTypeAlias({
            name: paramName + 'DeleteParams',
            type: `paths[${path}]['delete']['parameters']['body']['root']`,
            isExported: true,
          })
          break
        default:
          break
      }
    }
  }
}

createApis(sourceFile.getInterface('paths')!)
targetFile.formatText()
targetFile.saveSync()
sourceFile.formatText()
sourceFile.saveSync()
