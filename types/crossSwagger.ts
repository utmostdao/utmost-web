/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/browser/detail/extrinsicEventRecords': {
    get: {
      parameters: {
        query: {
          /** 交易哈希 */
          hash: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«事件记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 区块哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                blockHash: string
                /**
                 * Format: int64
                 * @description 事件区块
                 * @example 12355
                 */
                height: number
                /**
                 * Format: int64
                 * @description 事件序号
                 * @example 1
                 */
                index: number
                /**
                 * Format: int64
                 * @description 事件时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 事件类型
                 * @example Transfer
                 */
                type: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/extrinsicBaseInfos': {
    get: {
      parameters: {
        query: {
          /** 交易哈希 */
          hash: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 交易记录 */
            data?: {
              /**
               * @description 金额 (操作为转账时)
               * @example 10.011
               */
              amount?: number
              /**
               * @description 参数
               * @example {
               *   "callIndex": "0x0000",
               *   "args": {
               *     "now": 1563948892
               *   }
               * }
               */
              args: string
              /**
               * @description DATA
               * @example 0x9d0481ff0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e029857d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad4090534001100f10100000000000000027d37c4b21bbac2081cba3729ba8eeb3a53eb296c0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e0298500000000000000000000000000000000000000000000003635c9adc5dea00000b5dee09dd4379e99f62464e0851493f5422f38e7fe37f1f54136611c4f1a30e70501f706eda17eb75cf8c214c8b2cb46405ad30eae07df4ee542382ea677499061586ca6f9e5201cf9bb2fd7e7e29e4a51a5ec1aa635b60864ba6f753e807c031ab000
               */
              data: string
              /**
               * @description 发送方
               * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
               */
              from: string
              /**
               * Format: int64
               * @description 交易区块
               * @example 12355
               */
              height: number
              /**
               * @description 操作
               * @example balances.transfer
               */
              operation: string
              /**
               * Format: int32
               * @description 交易序号
               * @example 1
               */
              order: number
              /**
               * @description 签名
               * @example 0x7d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad40905
               */
              signature: string
              /**
               * @description 状态
               * @example Success
               */
              status: string
              /**
               * Format: int64
               * @description 交易时间戳
               * @example 1561446389543
               */
              timestamp: number
              /**
               * @description 接收方 (操作为转账时)
               * @example 6FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
               */
              to?: string
              /**
               * @description 交易哈希
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              txHash: string
              /**
               * @description 版本
               * @example 1
               */
              version: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/node/nextUps': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«节点信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /** 地址绑定信息 */
                bindingInfo: {
                  /**
                   * @description Controller 地址
                   * @example 5FZ7wDkDuKiDAwvDV65y9vGwsi9hfQKfPjtxYVNpLJPPE91S
                   */
                  controller: string
                  /**
                   * @description Session 地址
                   * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFgk
                   */
                  session?: string
                  /**
                   * @description Stash 地址
                   * @example 5GbAYtWuf5NL9rxjxiBM9o9g9MB9rfA7q9byJLy7N3oEUqgR
                   */
                  stash?: string
                }
                /**
                 * @description 累计出块数
                 * @example 11230
                 */
                cumulativeBlockNumber: number
                /**
                 * @description 累计漏块数
                 * @example 11230
                 */
                cumulativeMissingNumber: number
                /**
                 * @description 节点名称
                 * @example lienf
                 */
                nodeName: string
                /**
                 * @description 推荐抵押金额
                 * @example 3241.0123
                 */
                nominatorBondAmount: number
                /**
                 * Format: int32
                 * @description 支持者数量
                 * @example 10
                 */
                nominatorQuantity: number
                /**
                 * @description 自抵押金额
                 * @example 3241.0123
                 */
                selfBondAmount: number
                /**
                 * @description 节点类型
                 * @example VALIDATOR
                 * @enum {string}
                 */
                stakingType: 'VALIDATOR' | 'NEXT_UP'
                /**
                 * @description 总抵押金额
                 * @example 3241.0123
                 */
                totalBondAmount: number
                /** Format: double */
                totalBondAmountDouble?: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/verified/nodes': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          numPerPage: string
          /** 当前页 */
          page: string
          /** 查询类型 0:(全查), 1:(在线节点), 2:(离线节点), 3:(24 小时新增节点) */
          queryType?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«Verified Node 信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * Format: date-time
                 * @description 创建时间戳
                 * @example 1561446389543
                 */
                createTimestamp: string
                /**
                 * Format: date-time
                 * @description 上次出票时间戳
                 * @example 1561446389543
                 */
                lastVerifiedTimestamp: string
                /**
                 * Format: int64
                 * @description score
                 * @example 6
                 */
                score: number
                /**
                 * Format: int64
                 * @description tick
                 * @example 6
                 */
                tick: number
                /**
                 * @description 节点地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
                 */
                who: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/tickRecords': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          numPerPage: string
          /** 当前页 */
          page: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«出票记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 区块哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                blockHash: string
                /**
                 * Format: int64
                 * @description 事件区块
                 * @example 12355
                 */
                height: number
                /**
                 * Format: int64
                 * @description score
                 * @example 6
                 */
                score: number
                /**
                 * Format: int64
                 * @description tick
                 * @example 6
                 */
                tick: number
                /**
                 * Format: int64
                 * @description 事件时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 节点地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
                 */
                who: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/blockEventRecords': {
    get: {
      parameters: {
        query: {
          /** 块高 */
          height: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«事件记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 区块哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                blockHash: string
                /**
                 * Format: int64
                 * @description 事件区块
                 * @example 12355
                 */
                height: number
                /**
                 * Format: int64
                 * @description 事件序号
                 * @example 1
                 */
                index: number
                /**
                 * Format: int64
                 * @description 事件时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 事件类型
                 * @example Transfer
                 */
                type: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/blockExtrinsicRecords': {
    get: {
      parameters: {
        query: {
          /** 块高 */
          height: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«交易记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 金额 (操作为转账时)
                 * @example 10.011
                 */
                amount?: number
                /**
                 * @description 参数
                 * @example {
                 *   "callIndex": "0x0000",
                 *   "args": {
                 *     "now": 1563948892
                 *   }
                 * }
                 */
                args: string
                /**
                 * @description DATA
                 * @example 0x9d0481ff0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e029857d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad4090534001100f10100000000000000027d37c4b21bbac2081cba3729ba8eeb3a53eb296c0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e0298500000000000000000000000000000000000000000000003635c9adc5dea00000b5dee09dd4379e99f62464e0851493f5422f38e7fe37f1f54136611c4f1a30e70501f706eda17eb75cf8c214c8b2cb46405ad30eae07df4ee542382ea677499061586ca6f9e5201cf9bb2fd7e7e29e4a51a5ec1aa635b60864ba6f753e807c031ab000
                 */
                data: string
                /**
                 * @description 发送方
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
                 */
                from: string
                /**
                 * Format: int64
                 * @description 交易区块
                 * @example 12355
                 */
                height: number
                /**
                 * @description 操作
                 * @example balances.transfer
                 */
                operation: string
                /**
                 * Format: int32
                 * @description 交易序号
                 * @example 1
                 */
                order: number
                /**
                 * @description 签名
                 * @example 0x7d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad40905
                 */
                signature: string
                /**
                 * @description 状态
                 * @example Success
                 */
                status: string
                /**
                 * Format: int64
                 * @description 交易时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 接收方 (操作为转账时)
                 * @example 6FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
                 */
                to?: string
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 版本
                 * @example 1
                 */
                version: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/blockBaseInfos': {
    get: {
      parameters: {
        query: {
          /** 块高 */
          height: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 块信息 */
            data?: {
              /**
               * @description 出块人
               * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFgk
               */
              blocker: string
              /**
               * Format: int64
               * @description 事件数
               * @example 332
               */
              eventNumber: number
              /**
               * @description 交易根
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              extrinsicsRoot: string
              /**
               * @description 区块哈希
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              hash: string
              /**
               * Format: int64
               * @description 区块高度
               * @example 12554
               */
              height: number
              /**
               * @description 父哈希
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              prevHash: string
              /**
               * @description 状态根
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              stateRoot: string
              /**
               * Format: int64
               * @description 出块时间戳
               * @example 1561446389543
               */
              timestamp: number
              /**
               * Format: int64
               * @description 交易数
               * @example 1234
               */
              transactionNumber: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/blockChain/eventRecords': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«事件记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 区块哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                blockHash: string
                /**
                 * Format: int64
                 * @description 事件区块
                 * @example 12355
                 */
                height: number
                /**
                 * Format: int64
                 * @description 事件序号
                 * @example 1
                 */
                index: number
                /**
                 * Format: int64
                 * @description 事件时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 事件类型
                 * @example Transfer
                 */
                type: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/blockChain/extrinsicRecords': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«交易记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 金额 (操作为转账时)
                 * @example 10.011
                 */
                amount?: number
                /**
                 * @description 参数
                 * @example {
                 *   "callIndex": "0x0000",
                 *   "args": {
                 *     "now": 1563948892
                 *   }
                 * }
                 */
                args: string
                /**
                 * @description DATA
                 * @example 0x9d0481ff0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e029857d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad4090534001100f10100000000000000027d37c4b21bbac2081cba3729ba8eeb3a53eb296c0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e0298500000000000000000000000000000000000000000000003635c9adc5dea00000b5dee09dd4379e99f62464e0851493f5422f38e7fe37f1f54136611c4f1a30e70501f706eda17eb75cf8c214c8b2cb46405ad30eae07df4ee542382ea677499061586ca6f9e5201cf9bb2fd7e7e29e4a51a5ec1aa635b60864ba6f753e807c031ab000
                 */
                data: string
                /**
                 * @description 发送方
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
                 */
                from: string
                /**
                 * Format: int64
                 * @description 交易区块
                 * @example 12355
                 */
                height: number
                /**
                 * @description 操作
                 * @example balances.transfer
                 */
                operation: string
                /**
                 * Format: int32
                 * @description 交易序号
                 * @example 1
                 */
                order: number
                /**
                 * @description 签名
                 * @example 0x7d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad40905
                 */
                signature: string
                /**
                 * @description 状态
                 * @example Success
                 */
                status: string
                /**
                 * Format: int64
                 * @description 交易时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 接收方 (操作为转账时)
                 * @example 6FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
                 */
                to?: string
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 版本
                 * @example 1
                 */
                version: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/blockChain/blockInfos': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«块信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 出块人
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFgk
                 */
                blocker: string
                /**
                 * Format: int64
                 * @description 事件数
                 * @example 332
                 */
                eventNumber: number
                /**
                 * @description 交易根
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                extrinsicsRoot: string
                /**
                 * @description 区块哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                hash: string
                /**
                 * Format: int64
                 * @description 区块高度
                 * @example 12554
                 */
                height: number
                /**
                 * @description 父哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                prevHash: string
                /**
                 * @description 状态根
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                stateRoot: string
                /**
                 * Format: int64
                 * @description 出块时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * Format: int64
                 * @description 交易数
                 * @example 1234
                 */
                transactionNumber: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/blockChain/accountRecords': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«账户列表信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 账户地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
                 */
                address: string
                /**
                 * @description 可用余额
                 * @example 11239812.1
                 */
                availableBalance: number
                /** @description 侧链余额 */
                edgeChainBalance: { [key: string]: number }
                /**
                 * @description 总余额
                 * @example 11239812.1
                 */
                totalBalance: number
                /**
                 * Format: int64
                 * @description 交易数
                 * @example 12355
                 */
                txCount: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/search': {
    get: {
      parameters: {
        query: {
          /** 搜索条件 (交易哈希/区块哈希/区块高度/地址) */
          searchCondition: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 搜索结果 */
            data?: {
              /**
               * @description 搜索条件
               * @example 3302
               */
              searchCondition: string
              /**
               * @description 搜索结果类型
               * @example NONE
               * @enum {string}
               */
              type:
                | 'NONE'
                | 'ADDRESS'
                | 'BLOCK_HASH'
                | 'BLOCK_HEIGHT'
                | 'EXTRINSIC_HASH'
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/txHash': {
    get: {
      parameters: {
        query: {
          evmHash: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** @description 返回数据 */
            data?: {
              txHash: string
            }
            /** @description 返回消息 (中文) */
            msg: string
          }
        }
      }
    }
  }
  '/browser/detail/validatorBaseInfos': {
    get: {
      parameters: {
        query: {
          /** 节点 Stash 地址 */
          stashAddress: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 节点信息 */
            data?: {
              /** 地址绑定信息 */
              bindingInfo: {
                /**
                 * @description Controller 地址
                 * @example 5FZ7wDkDuKiDAwvDV65y9vGwsi9hfQKfPjtxYVNpLJPPE91S
                 */
                controller: string
                /**
                 * @description Session 地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFgk
                 */
                session?: string
                /**
                 * @description Stash 地址
                 * @example 5GbAYtWuf5NL9rxjxiBM9o9g9MB9rfA7q9byJLy7N3oEUqgR
                 */
                stash?: string
              }
              /**
               * @description 累计出块数
               * @example 11230
               */
              cumulativeBlockNumber: number
              /**
               * @description 累计漏块数
               * @example 11230
               */
              cumulativeMissingNumber: number
              /**
               * @description 节点名称
               * @example lienf
               */
              nodeName: string
              /**
               * @description 推荐抵押金额
               * @example 3241.0123
               */
              nominatorBondAmount: number
              /**
               * Format: int32
               * @description 支持者数量
               * @example 10
               */
              nominatorQuantity: number
              /**
               * @description 自抵押金额
               * @example 3241.0123
               */
              selfBondAmount: number
              /**
               * @description 节点类型
               * @example VALIDATOR
               * @enum {string}
               */
              stakingType: 'VALIDATOR' | 'NEXT_UP'
              /**
               * @description 总抵押金额
               * @example 3241.0123
               */
              totalBondAmount: number
              /** Format: double */
              totalBondAmountDouble?: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/validatorNominatorInfos': {
    get: {
      parameters: {
        query: {
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
          /** 节点 Stash 地址 */
          stashAddress: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«支持者信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 节点 Stash 地址
                 * @example 5FTsGb2W8CfYpHecPBepsDnqQAnAp33WdHyZLayYBYDZqt5C
                 */
                validator?: string
                /**
                 * @description 绑定金额
                 * @example 199.9
                 */
                value?: number
                /** Format: double */
                valueDouble?: number
                /**
                 * @description 支持者 Stash 地址
                 * @example 5FTsGb2W8CfYpHecPBepsDnqQAnAp33WdHyZLayYBYDZqt5C
                 */
                who?: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/customerData': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** @description 返回数据 */
            data?: { [key: string]: unknown }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/timeSeries': {
    get: {
      parameters: {
        query: {
          /** 地址, 类型为 地址出票数(ADDRESS_TICK) 时需传入 */
          address?: string
          /** 数据周期 */
          period: string
          /** 数据条数 */
          size?: string
          /** 时间 */
          time?: string
          /** 数据类型 */
          type: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** @description 返回数据 */
            data?: {
              /**
               * @description 时间序列数据类型
               * @example ALL_NODE
               * @enum {string}
               */
              dataType:
                | 'ALL_NODE'
                | 'NEW_NODE'
                | 'ONLINE_NODE'
                | 'OFFLINE_NODE'
                | 'FEE'
                | 'TOTAL_ISSUANCE'
                | 'TOTAL_TICK'
                | 'TOTAL_SCORE'
                | 'ADDRESS_COUNT'
                | 'ADDRESS_TICK'
                | 'ADDRESS_TOTAL_TICK'
                | 'ADDRESS_NODE'
              /**
               * @description 索引 key
               * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
               */
              key: string
              /**
               * @description 时间序列周期
               * @example HOUR
               * @enum {string}
               */
              periodType: 'DAY' | 'WEEK' | 'MONTH'
              /**
               * Format: date-time
               * @description 数据时间戳
               * @example 1561446389543
               */
              timestamp: string
              /**
               * Format: double
               * @description 值
               * @example 6
               */
              value: number
            }[]
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/accountBaseInfos': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 账户基本信息 */
            data?: {
              /**
               * @description 账户地址
               * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
               */
              address: string
              /**
               * @description 账户公钥
               * @example 0x458469e770f2fad9719714b87fba46a9960f9a4098e15443abb47379bd7a0b63
               */
              pubKey: string
              /**
               * Format: int64
               * @description 交易数
               * @example 12355
               */
              txCount: number
              /** Verified Node 信息 */
              verifiedNodeInfo: {
                /**
                 * Format: date-time
                 * @description 创建时间戳
                 * @example 1561446389543
                 */
                createTimestamp: string
                /**
                 * Format: date-time
                 * @description 上次出票时间戳
                 * @example 1561446389543
                 */
                lastVerifiedTimestamp: string
                /**
                 * Format: int64
                 * @description score
                 * @example 6
                 */
                score: number
                /**
                 * Format: int64
                 * @description tick
                 * @example 6
                 */
                tick: number
                /**
                 * @description 节点地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
                 */
                who: string
              }
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/accountNominators': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«支持者信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 节点 Stash 地址
                 * @example 5FTsGb2W8CfYpHecPBepsDnqQAnAp33WdHyZLayYBYDZqt5C
                 */
                validator?: string
                /**
                 * @description 绑定金额
                 * @example 199.9
                 */
                value?: number
                /** Format: double */
                valueDouble?: number
                /**
                 * @description 支持者 Stash 地址
                 * @example 5FTsGb2W8CfYpHecPBepsDnqQAnAp33WdHyZLayYBYDZqt5C
                 */
                who?: string
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/accountExtrinsics': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«交易记录» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 金额 (操作为转账时)
                 * @example 10.011
                 */
                amount?: number
                /**
                 * @description 参数
                 * @example {
                 *   "callIndex": "0x0000",
                 *   "args": {
                 *     "now": 1563948892
                 *   }
                 * }
                 */
                args: string
                /**
                 * @description DATA
                 * @example 0x9d0481ff0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e029857d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad4090534001100f10100000000000000027d37c4b21bbac2081cba3729ba8eeb3a53eb296c0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e0298500000000000000000000000000000000000000000000003635c9adc5dea00000b5dee09dd4379e99f62464e0851493f5422f38e7fe37f1f54136611c4f1a30e70501f706eda17eb75cf8c214c8b2cb46405ad30eae07df4ee542382ea677499061586ca6f9e5201cf9bb2fd7e7e29e4a51a5ec1aa635b60864ba6f753e807c031ab000
                 */
                data: string
                /**
                 * @description 发送方
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
                 */
                from: string
                /**
                 * Format: int64
                 * @description 交易区块
                 * @example 12355
                 */
                height: number
                /**
                 * @description 操作
                 * @example balances.transfer
                 */
                operation: string
                /**
                 * Format: int32
                 * @description 交易序号
                 * @example 1
                 */
                order: number
                /**
                 * @description 签名
                 * @example 0x7d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad40905
                 */
                signature: string
                /**
                 * @description 状态
                 * @example Success
                 */
                status: string
                /**
                 * Format: int64
                 * @description 交易时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 接收方 (操作为转账时)
                 * @example 6FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
                 */
                to?: string
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                txHash: string
                /**
                 * @description 版本
                 * @example 1
                 */
                version: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/accountAssetInfos': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 账户资产详情 */
            data?: {
              /**
               * @description 可用余额
               * @example 11239812.1
               */
              availableBalance: number
              /**
               * @description 抵押金额
               * @example 11239812.1
               */
              bondAmount: number
              /**
               * @description 全链总余额
               * @example 11239812.1
               */
              totalBalance: number
              /**
               * @description 赎回冻结
               * @example 11239812.1
               */
              unBondAmount: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/accountEdgeAssetInfos': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«账户跨链资产详情» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 账户地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg1
                 */
                address: string
                /**
                 * @description 可用余额
                 * @example 11239812.1
                 */
                availableBalance: number
                /**
                 * @description 币种
                 * @example PAD
                 * @enum {string}
                 */
                currency: 'CELL' | 'ETH' | 'PAD'
                /**
                 * @description 累计收益
                 * @example 1812.1
                 */
                reward: number
                /**
                 * @description 全链总余额
                 * @example 11239812.1
                 */
                totalBalance: number
                /**
                 * @description 交易冻结
                 * @example 11239812.1
                 */
                txFreezeAmount: number
                /**
                 * @description 提现冻结
                 * @example 11239812.1
                 */
                withdrawFreezeAmount: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/detail/accountTransactions': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
          /** 每页个数 */
          pageSize: number
          /** 当前页 */
          pageNo: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 分页信息«交易信息» */
            data?: {
              /**
               * @description 是否还有后一页
               * @example true
               */
              hasNext: boolean
              /**
               * @description 是否还有前一页
               * @example false
               */
              hasPrev: boolean
              /** @description 数据 */
              items: {
                /**
                 * @description 对应链名
                 * @example ETH
                 * @enum {string}
                 */
                chainName: 'CELL' | 'ETH' | 'PAD'
                /**
                 * @description 交易费用 (包含小数位)
                 * @example 0.00213
                 */
                fee: number
                /**
                 * @description 发送方
                 * @example 0xe94327d07fc17907b4db788e5adf2ed424addff6
                 */
                from: string
                /**
                 * @description 交易哈希
                 * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
                 */
                hash: string
                /**
                 * Format: int64
                 * @description 区块高度
                 * @example 48844
                 */
                height: number
                /**
                 * @description 是否失败
                 * @example false
                 */
                isError: boolean
                /**
                 * Format: int64
                 * @description 时间戳
                 * @example 1561446389543
                 */
                timestamp: number
                /**
                 * @description 接收方
                 * @example 0xe94327d07fc17907b4db788e5adf2ed424addff6
                 */
                to: string
                /**
                 * @description 交易流向
                 * @example IN
                 * @enum {string}
                 */
                txFlow: 'IN' | 'OUT'
                /**
                 * @description 金额 (包含小数位)
                 * @example 10000.123
                 */
                value: number
              }[]
              /**
               * Format: int32
               * @description 每页个数
               * @example 50
               */
              numPerPage: number
              /**
               * Format: int32
               * @description 当前页码 (最小为1)
               * @example 1
               */
              page: number
              /**
               * Format: int64
               * @description 总数
               * @example 50
               */
              totalNum: number
              /**
               * Format: int32
               * @description 总页数
               * @example 5
               */
              totalPageNum: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/home/transferPreview': {
    get: {
      parameters: {
        query: {
          /** 最大返回数 (1 - 50) */
          limit: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** @description 返回数据 */
            data?: {
              /**
               * @description 金额
               * @example 10.011
               */
              amount?: number
              /**
               * @description DATA
               * @example 0x9d0481ff0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e029857d375f103a5e996672772c58df64e9326cf9765f0face915e6afb8c90a9e4500527037db6c174b192dbf36ca92e79b76dbabb616b1ddc5059ed770db5ad4090534001100f10100000000000000027d37c4b21bbac2081cba3729ba8eeb3a53eb296c0bdb300d3f861c5f9dad27b4f2d37b613ab59c689f469cbb19b5844b75e0298500000000000000000000000000000000000000000000003635c9adc5dea00000b5dee09dd4379e99f62464e0851493f5422f38e7fe37f1f54136611c4f1a30e70501f706eda17eb75cf8c214c8b2cb46405ad30eae07df4ee542382ea677499061586ca6f9e5201cf9bb2fd7e7e29e4a51a5ec1aa635b60864ba6f753e807c031ab000
               */
              data: string
              /**
               * @description 手续费
               * @example 1e-9
               */
              fee?: number
              /**
               * @description 发送方
               * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
               */
              from: string
              /**
               * Format: int64
               * @description 交易区块
               * @example 12355
               */
              height: number
              /**
               * Format: int64
               * @description 交易时间戳
               * @example 1561446389543
               */
              timestamp: number
              /**
               * @description 接收方
               * @example 6FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFg
               */
              to?: string
              /**
               * @description 交易哈希
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              txHash: string
            }[]
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/home/networkPreview': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** 全网预览信息 */
            data?: {
              /**
               * Format: int64
               * @description 账户数量
               * @example 3324
               */
              accountNumber: number
              /**
               * Format: int64
               * @description 跨链交易数 (弃用)
               * @example 67
               */
              crossChainTxNumber: number
              /**
               * Format: int64
               * @description 区块高度
               * @example 12554
               */
              height: number
              /**
               * @description 节点抵押金额 (弃用)
               * @example 5981798.52334
               */
              nodeMortgageAmount: number
              /**
               * Format: int64
               * @description 全网总节点数
               * @example 14
               */
              nodeTotal: number
              /**
               * @description 交易手续费
               * @example 14
               */
              totalFee: number
              /**
               * @description Total Issuance
               * @example 14
               */
              totalIssuance: number
              /**
               * Format: int64
               * @description Total Score
               * @example 14
               */
              totalScore: number
              /**
               * Format: int64
               * @description Total Tick
               * @example 14
               */
              totalTick: number
              /**
               * Format: int64
               * @description 交易数
               * @example 532
               */
              txNumber: number
              /**
               * Format: int64
               * @description 验证节点数 (弃用)
               * @example 14
               */
              validatorNumber: number
            }
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/home/blocksPreview': {
    get: {
      parameters: {
        query: {
          /** 最大返回数 (1 - 50) */
          limit: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** @description 返回数据 */
            data?: {
              /**
               * @description 出块人
               * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFgk
               */
              blocker: string
              /**
               * Format: int64
               * @description 事件数
               * @example 332
               */
              eventNumber: number
              /**
               * @description 交易根
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              extrinsicsRoot: string
              /**
               * @description 区块哈希
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              hash: string
              /**
               * Format: int64
               * @description 区块高度
               * @example 12554
               */
              height: number
              /**
               * @description 父哈希
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              prevHash: string
              /**
               * @description 状态根
               * @example 0x6aa670c983425eba23314459c48ae89b3b8d0e1089397c56400ce2da5ece9d26
               */
              stateRoot: string
              /**
               * Format: int64
               * @description 出块时间戳
               * @example 1561446389543
               */
              timestamp: number
              /**
               * Format: int64
               * @description 交易数
               * @example 1234
               */
              transactionNumber: number
            }[]
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/browser/node/validators': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回码
             * @example 200 (成功), -100 (失败)
             * @enum {string}
             */
            code: 'SUCCESS' | 'FAIL'
            /** @description 返回数据 */
            data?: {
              /** 地址绑定信息 */
              bindingInfo: {
                /**
                 * @description Controller 地址
                 * @example 5FZ7wDkDuKiDAwvDV65y9vGwsi9hfQKfPjtxYVNpLJPPE91S
                 */
                controller: string
                /**
                 * @description Session 地址
                 * @example 5FfT7FznSbtzgiGFMxjFyzD9EqLyQgcHowfwWh8tzogBnFgk
                 */
                session?: string
                /**
                 * @description Stash 地址
                 * @example 5GbAYtWuf5NL9rxjxiBM9o9g9MB9rfA7q9byJLy7N3oEUqgR
                 */
                stash?: string
              }
              /**
               * @description 累计出块数
               * @example 11230
               */
              cumulativeBlockNumber: number
              /**
               * @description 累计漏块数
               * @example 11230
               */
              cumulativeMissingNumber: number
              /**
               * @description 节点名称
               * @example lienf
               */
              nodeName: string
              /**
               * @description 推荐抵押金额
               * @example 3241.0123
               */
              nominatorBondAmount: number
              /**
               * Format: int32
               * @description 支持者数量
               * @example 10
               */
              nominatorQuantity: number
              /**
               * @description 自抵押金额
               * @example 3241.0123
               */
              selfBondAmount: number
              /**
               * @description 节点类型
               * @example VALIDATOR
               * @enum {string}
               */
              stakingType: 'VALIDATOR' | 'NEXT_UP'
              /**
               * @description 总抵押金额
               * @example 3241.0123
               */
              totalBondAmount: number
              /** Format: double */
              totalBondAmountDouble?: number
            }[]
            /** @description 返回消息 (中文) */
            msgCn: string
            /** @description 返回消息 (英文) */
            msgEn: string
          }
        }
      }
    }
  }
  '/bridge/remark': {
    get: {
      parameters: {
        query: {
          objectID: string
          /** 可选值：Provider, Committee, Bridge, Validator */
          objectType: string
        }
        body: {
          /** 请求参数 */
          root?: {
            /** @description 简介 */
            introduce?: string
            /** @description 名称 */
            name: string
            /** @description 对象ID */
            objectID: string
            /** @description 对象类型 */
            objectType: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              remarkName: string
              remarkObjectType: string
              remarkObjectID: string
              remarkIntroduce: string
            }
          }
        }
      }
    }
    put: {
      parameters: {
        body: {
          /** 请求参数 */
          root?: {
            /** @description 简介 */
            introduce?: string
            /** @description 名称 */
            name: string
            /** @description 对象ID */
            objectID: string
            /** @description 对象类型 */
            objectType: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: { [key: string]: unknown }
          }
        }
      }
    }
    post: {
      parameters: {
        body: {
          /** 请求参数 */
          root?: {
            /** @description 简介 */
            introduce?: string
            /** @description 名称 */
            name: string
            /** @description 对象ID */
            objectID: string
            /** @description 对象类型，枚举值：Provider, Committee, Bridge,Validator */
            objectType: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: { [key: string]: unknown }
          }
        }
      }
    }
  }
  '/bridge/bridge-cache': {
    get: {
      parameters: {
        query: {
          /** 创建者地址 */
          ownerAddress: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 跨链桥缓存信息链信息 */
              bridgeCacheChainInfo: string
            }
          }
        }
      }
    }
    put: {
      parameters: {
        body: {
          /** 请求参数 */
          root?: {
            /** @description 链信息缓存，传字符串类型，格式前端自定义，后端不做处理 */
            chainInfo: string
            /** @description 创建者地址 */
            ownerAddress: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: { [key: string]: unknown }
          }
        }
      }
    }
    post: {
      parameters: {
        body: {
          /** 请求参数 */
          root?: {
            /** @description 链信息缓存，传字符串类型，格式前端自定义，后端不做处理 */
            chainInfo: string
            /** @description 创建者地址 */
            ownerAddress: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: { [key: string]: unknown }
          }
        }
      }
    }
    delete: {
      parameters: {
        body: {
          /** 请求参数 */
          root?: {
            /** @description 创建者地址 */
            ownerAddress: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: { [key: string]: unknown }
          }
        }
      }
    }
  }
  '/bridge/committees': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 创建者地址 */
          ownerAddress: string
          /** 创建桥页面选择委员会的列表传true，分页展示页面不需要传 */
          forCreateBridge?: string
          /** 需要排除的委员会ID数组 */
          exclusiveCommitteeIDs?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 跨链桥副本数 */
                committeeCopyNumber?: string
                /** @description 跨链桥ID */
                committeeID?: string
                /** @description 跨链桥名称 */
                committeeName?: string
                /** @description 跨链桥阈值 */
                committeeThreshold?: string
                /** @description 跨链桥公钥 */
                committeePubKey?: string
                /** @description 跨链桥成员数 */
                committeeMemberNumber?: string
                /** @description 跨链桥签名类型 */
                committeeSignatureType?: string
                committeeBridgeName: string
                committeeChainID: string
                committeeChainName: string
                committeeChainIcon: string
              }[]
            }
          }
        }
      }
    }
  }
  '/bridge/cross-bridges': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 创建者地址 */
          ownerAddress?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 跨链桥创建完成时间 */
                crossBridgeCreateTime?: string
                /** @description 跨链桥名称 */
                crossBridgeName?: string
                /** @description 跨链桥简介 */
                crossBridgeIntroduce: string
                /** @description 跨链桥ID */
                crossBridgeID?: string
                /** @description 跨链桥状态 */
                crossBridgeStatus: string
                /** @description 链数组 */
                crossBridgeChainIDs: string[]
                crossBridgeToken: string
              }[]
            }
          }
        }
      }
    }
  }
  '/bridge/cross-bridge': {
    get: {
      parameters: {
        query: {
          /** 桥ID */
          crossBridgeID: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 链ID */
              chainID?: string
              chainName: string
              chainIcon: string
              /** @description 委员会ID */
              committeeID?: string
              /** @description 委员会名称 */
              committeeName?: string
              /** @description 跨链桥副本数 */
              committeeCopyNumber?: number
              /** @description 跨链桥阈值 */
              committeeThreshold?: string
              /** @description 跨链桥公钥 */
              committeePubKey?: string
              /** @description 跨链桥成员数 */
              committeeMemberNumber?: number
              /** @description anchor合约地址 */
              anchorContractAddress?: string
            }[]
          }
        }
      }
    }
  }
  '/bridge/support-chains': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 链名称 */
              name?: string
              /** @description 链ID */
              chainID: string
              /** @description 图标 */
              icon: string
              /** @description token列表 */
              tokenInfos: {
                /** @description token名称 */
                tokenName: string
                /** @description token简写名称 */
                tokenSimpleName: string
                /** @description token合约地址 */
                tokenContractAddress: string
              }[]
            }[]
          }
        }
      }
    }
  }
  '/bridge/anchor-ready:check': {
    get: {
      parameters: {
        query: {
          /** 按照格式传递合约地址数组，chainID1:contractAddress1,chainID2:contractAddress2 */
          contractArrayStr: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            data: {
              /** @description 返回是否合约同步完成，true表示同步完成，同步完成后才能执行委员会绑定合约操作 */
              checkResult: boolean
            }
          }
        }
      }
    }
  }
  '/bridge/bridge-browser-txs': {
    get: {
      parameters: {
        query: {
          /** 根据起始时间戳筛选查询 */
          startTs?: string
          /** 根据结束时间戳筛选查询 */
          endTs?: string
          /** 根据发起链ID筛选查询 */
          sourceChainID?: string
          /** 根据目标链ID筛选查询 */
          destChainID?: string
          /** 根据桥ID筛选查询 */
          bridgeID?: string
          /** 根据状态筛选查询，枚举值：Pending, Success, Fail */
          status?: string
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 根据3条链的交易hash筛选查询 */
          txHash?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 交易时间 */
                txTime?: string
                /** @description 跨链交易ID */
                crossID: string
                /** @description 币种 */
                token?: string
                /** @description 金额 */
                amount?: string
                /** @description 发起链ID */
                sourceChainID?: string
                /** @description 发起链交易 */
                sourceTx?: string
                /** @description 目标链ID */
                destChainID?: string
                /** @description 目标链交易 */
                destTx?: string
                /** @description 状态 */
                status?: string
              }[]
            }
          }
        }
      }
    }
  }
  '/bridge/bridge-browser-tx:detail': {
    get: {
      parameters: {
        query: {
          /** 跨链交易ID */
          crossID: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 发起链详情信息 */
              sourceTxInfo: {
                chainID: string
                txTime: string
                height: string
                txHash: string
                token: string
                amount: string
                status: string
              }
              /** @description 目标链详情信息 */
              destTxInfo: {
                chainID: string
                txTime: string
                height: string
                txHash: string
                token: string
                amount: string
                status: string
              }
              /** @description Bool链详情信息 */
              boolTxInfo: {
                bridgeID: string
                bridgeName: string
                committeeID: string
                committeeName: string
                committeeMemberNumber: number
                committeeThreshold: number
                txTime: string
                height: string
                txHash: string
                status: string
              }
            }
          }
        }
      }
    }
  }
  '/bridge/bridge-browser-bridges': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 链ID列表，用英文逗号分割 */
          chainIDs: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                bridgeID?: string
                bridgeName?: string
                bridgeToken?: string
                /** @description 交易量 */
                txCount?: number
                /** @description 锁仓量 */
                tvl?: string
                volume?: string
              }[]
            }
          }
        }
      }
    }
  }
  '/bridge/bridge-browser-bridges2': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                bridgeID?: string
                bridgeName?: string
                bridgeToken?: string
                /** @description 交易量 */
                txCount?: number
                /** @description 锁仓量 */
                tvl?: string
                volume?: string
              }[]
            }
          }
        }
      }
    }
  }
  '/bridge/bridge-browser-home': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 总交易数 */
              totalTxCount?: number
              totalVolume: string
              /** @description 总锁仓量 */
              totalTVL: string
            }
          }
        }
      }
    }
  }
  '/swap/pools': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 数据域 */
            data: {
              poolTokenName?: string
              poolChainID?: string
              poolChainName?: string
              poolTransactions?: string
              poolTVL?: string
              poolVolumeOf24Hours?: string
              poolVolumeOf30Days: string
              poolID: string
              poolChainIcon: string
              poolTokenIcon: string
              tokenID: string
            }[]
          }
        }
      }
    }
  }
  '/swap/joined-pools': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 数据域 */
            data: {
              poolTokenName?: string
              poolChainID?: string
              poolChainName?: string
              poolTransactions?: string
              poolTVL?: string
              poolVolumeOf24Hours?: string
              poolVolumeOf30Days?: string
              pooledTokens?: string
              share?: string
              poolID: string
              poolChainIcon: string
              poolTokenIcon: string
              tokenID: string
            }[]
          }
        }
      }
    }
  }
  '/swap/swap-records': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          userAddress: string
          chainID?: string
          srcChainHash?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 跨链swap记录起始链代币id */
                swapRecordSrcTokenID?: string
                /** @description 跨链swap记录目标链代币id */
                swapRecordDstTokenID?: string
                /** @description 跨链swap记录起始链id */
                swapRecordSrcChainID?: string
                /** @description 跨链swap记录目标链名称 */
                swapRecordDstChainName?: string
                /** @description 跨链swap记录目标链id */
                swapRecordDstChainID?: string
                /** @description 跨链swap记录起始链名称 */
                swapRecordSrcChainName?: string
                /** @description 跨链swap记录起始链交易hash */
                swapRecordSrcChainHash?: string
                /** @description 跨链swap记录ID */
                swapRecordID?: string
                /** @description 跨链swap记录目标链金额 */
                swapRecordDstTokenAmount?: string
                /** @description 跨链swap记录用户地址 */
                swapRecordUserAddress?: string
                /** @description 跨链swap记录起始链金额 */
                swapRecordSrcTokenAmount?: string
                /** @description 跨链swap记录目标链交易hash */
                swapRecordDstChainHash?: string
                /** @description 跨链swap记录状态 */
                swapRecordCreateTime?: string
                swapRecordBoolChainHash?: string
              }[]
            }
          }
        }
      }
    }
  }
  '/swap/swap-record': {
    get: {
      parameters: {
        query: {
          /** 跨链swap记录ID */
          swapRecordID: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 跨链swap记录目标链id */
              swapRecordDstChainID: string
              /** @description 跨链swap记录ID */
              swapRecordID: string
              /** @description 跨链swap记录用户地址 */
              swapRecordUserAddress: string
              /** @description 跨链swap记录起始链金额 */
              swapRecordSrcTokenAmount: string
              /** @description 跨链swap记录名称 */
              swapRecordName: string
              /** @description 跨链swap记录状态 */
              swapRecordStatus: string
              /** @description 跨链swap记录起始链代币 */
              swapRecordSrcSymbol: string
              /** @description 跨链swap记录起始链id */
              swapRecordSrcChainID: string
              /** @description 跨链swap记录起始链交易hash */
              swapRecordSrcChainHash: string
              /** @description 跨链swap记录目标链金额 */
              swapRecordDstTokenAmount: string
              /** @description 跨链swap记录目标链交易hash */
              swapRecordDstChainHash: string
              /** @description 跨链swap记录跨链id */
              swapRecordCrossID: string
            }
          }
        }
      }
    }
    post: {
      parameters: {
        body: {
          /** 请求参数 */
          root?: {
            /** @description 起始链金额 */
            srcTokenAmount: string
            /** @description 用户地址 */
            userAddress: string
            /** @description 目标链金额 */
            dstTokenAmount: string
            /** @description 起始链交易hash */
            srcChainHash: string
            /** @description 起始链id */
            srcChainID: string
            /** @description 起始链代币 */
            srcTokenID: string
            /** @description 目标链id */
            dstChainID: string
            dstTokenID: string
          }
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: { [key: string]: unknown }
          }
        }
      }
    }
  }
  '/swap:gas': {
    get: {
      parameters: {
        query: {
          /** 网络 */
          chainID: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            code: string
            msg: string
            data: {
              safeGasPrice: string
              /** @description 推荐 */
              proposeGasPrice: string
              /** @description 快 */
              fastGasPrice: string
              suggestBaseFee: string
            }
            fail: boolean
          }
        }
      }
    }
  }
  '/swap:contract-details': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm-svc.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              chainID: string
              factory: string
              router: string
              messenger: string
            }[]
          }
        }
      }
    }
  }
  '/swap:chain-details': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm-svc.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              swapNetwork: string
              chainID: string
              chainIcon: string
              tokens: {
                name: string
                symbol: string
                tokenDecimals: string
                tokenContractAddress: string
                isNative: boolean
                anchorContractAddress: string
                id: string
                icon: string
                poolAddress: string
                poolID: string
              }[]
            }[]
          }
        }
      }
    }
  }
  '/swap:user-token-balance': {
    get: {
      parameters: {
        query: {
          /** 网络 */
          chainID: string
          /** 用户地址 */
          address: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            code: string
            msg: string
            data: {
              id: string
              amount: string
            }[]
            fail: boolean
          }
        }
      }
    }
  }
  '/swap:exchange-rate': {
    get: {
      parameters: {
        query: {
          /** 网络 */
          chainID: string
          /** 代币 */
          tokenID: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            code: string
            msg: string
            data: {
              nativeCurrencyRate: string
              /** @description 推荐 */
              dstTokenRate: string
            }
            fail: boolean
          }
        }
      }
    }
  }
  '/node/validators': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 提名人地址，不传返回所有的验证人列表，传了返回该提名人关联的验证人列表 */
          nominatorAddress?: string
          /** 根据验证人状态查询,，Waiting表示等待中, Active表示已激活 */
          validatorStatus?: string
          /** 创建提名人选择关联的验证人传true，其它的默认为false，可以不传 */
          forNominatorCreation?: string
          /** 根据validator地址或者名称模糊查询 */
          searchStr?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 验证人收入分配方式 */
                validatorIncomeDistributionType?: string
                /** @description 验证人状态 */
                validatorStatus?: string
                /** @description 验证人是否允许提名人 */
                validatorAllowNominator?: string
                /** @description 验证人地址 */
                validatorAddress?: string
                /** @description 验证人名称 */
                validatorName?: string
                /** @description 验证人佣金费率 */
                validatorFeeRatio?: string
                validatorLastBlock: string
              }[]
            }
          }
        }
      }
    }
  }
  '/node/epoch-info': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 倒计时开始时间戳 */
              epochStartTime: string
              /** @description 倒计时时长 */
              epochDuration: string
            }
          }
        }
      }
    }
  }
  '/node/era-info': {
    get: {
      parameters: {}
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 倒计时开始时间戳 */
              eraStartTime: string
              /** @description 倒计时时长 */
              eraDuration: string
            }
          }
        }
      }
    }
  }
  '/node/check-virtual-account-creation': {
    get: {
      parameters: {
        query: {
          /** 地址 */
          address: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description true表示已经创建虚拟账户 */
              checkResult: boolean
            }
          }
        }
      }
    }
  }
  '/blockchain/provider:info': {
    get: {
      parameters: {
        query: {
          /** 如果传，则只查询指定供应商的数据 */
          providerID?: string
          ownerAddress?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 总质押 */
              totalCap: string
              /** @description 总奖励 */
              totalReward: string
              /** @description 总惩罚 */
              totalPunish: string
              /** @description 总领取 */
              totalClaim: string
            }
          }
        }
      }
    }
  }
  '/blockchain/providers': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 可选，如果传了，则根据用户地址匹配 */
          ownerAddress?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 供应商owner地址 */
                providerOwnerAddress?: string
                /** @description 供应商质押总量 */
                providerCap?: string
                /** @description 供应商注册时间 */
                providerCreateTimeOnChain?: string
                /** @description 供应商ID */
                providerID?: string
                /** @description 设备数量 */
                providerDeviceCount: string
                /** @description 累计惩罚金额 */
                providerPunishAmount: string
                /** @description 累计惩罚次数 */
                providerPunishCount: string
                /** @description 累计奖励金额 */
                providerRewardAmount: string
                /** @description 累计领取金额 */
                providerClaimAmount: string
              }[]
            }
          }
        }
      }
    }
  }
  '/blockchain/rewards': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 奖励ID */
                rewardID?: string
                /** @description 奖励奖励金额 */
                rewardRewardTimeOnChain?: string
                /** @description 奖励奖励类型 */
                rewardType?: string
                /** @description 奖励设备ID */
                rewardDeviceID?: string
                /** @description 奖励绑定的供应商ID */
                rewardProviderID?: string
                /** @description 奖励奖励金额 */
                rewardAmount?: string
              }[]
            }
          }
        }
      }
    }
  }
  '/blockchain/devices': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
          /** 传该参数，只查询某一个供应商的设备列表 */
          providerID?: string
          /** 传该参数，只查询某一个状态的设备列表 */
          deviceState?: string
          /** 可选，如果传了，则根据用户地址匹配 */
          ownerAddress?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 设备状态开始时间 */
                deviceStateTimeOnChain?: string
                /** @description 设备绑定的供应商ID */
                deviceBindProviderID?: string
                /** @description 设备状态 */
                deviceState?: string
                /** @description 设备ID */
                deviceID?: string
                /** @description 设备ID版本 */
                deviceIDVersion: string
                /** @description 设备owner地址 */
                deviceOwnerAddress?: string
                /** @description 设备注册时间 */
                deviceRegisterTimeOnChain?: string
                /** @description 设备累计惩罚金额 */
                devicePunishAmount: string
                /** @description 设备累计惩罚次数 */
                devicePunishCount: string
                /** @description 设备累计奖励金额（Mining类型） */
                deviceMiningRewardAmount: string
                /** @description 设备累计奖励金额（Serving类型） */
                deviceServicingRewardAmount: string
              }[]
            }
          }
        }
      }
    }
  }
  '/blockchain/device:info': {
    get: {
      parameters: {
        query: {
          /** 如果传，则只查询指定供应商的数据 */
          providerID?: string
          ownerAddress?: string
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 未上架设备数量 */
              unMountCount: number
              /** @description 待机设备数量 */
              startedCount: number
              /** @description 服务中设备数量 */
              joinCount: number
              /** @description 退出服务设备数量 */
              tryQuitCount: number
              /** @description 停止设备数量 */
              stoppedCount: number
              /** @description 离线设备数量 */
              offlineCount: number
            }
          }
        }
      }
    }
  }
  '/blockchain/claims': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 奖励领取供应商ID */
                claimProviderID?: string
                /** @description 奖励领取领取时间 */
                claimClaimTimeOnChain?: string
                /** @description 奖励领取设备ID */
                claimDeviceID?: string
                /** @description 奖励领取领取金额 */
                claimAmount?: string
                /** @description 奖励领取ID */
                claimID?: string
              }[]
            }
          }
        }
      }
    }
  }
  '/blockchain/punishs': {
    get: {
      parameters: {
        query: {
          /**
           * 页码
           * 从 1 开始
           * 不传默认为第一页
           */
          pageNo: number
          /**
           * 每页个数
           * 不传默认为 20
           * 最大为 1000
           */
          pageSize: number
        }
      }
      responses: {
        /** successful operation */
        200: {
          schema: {
            /**
             * @description 返回消息
             * 异常时返回错误信息
             */
            msg: string
            /**
             * @description 返回码
             * 成功时返回 000 异常时返回码如 105.abm.UNKNOWN
             */
            code: string
            /** @description 返回数据 */
            data: {
              /** @description 是否还有前一页 */
              hasPrev: boolean
              /** @description 当前页码 */
              pageNo: number
              /** @description 总页数 */
              totalPage: number
              /** @description 每页个数 */
              pageSize: number
              /** @description 是否还有后一页 */
              hasNext: boolean
              /** @description 总数 */
              totalCount: number
              /** @description 数据域 */
              items: {
                /** @description 惩罚惩罚金额 */
                punishAmount?: string
                /** @description 惩罚供应商ID */
                punishProviderID?: string
                /** @description 惩罚设备ID */
                punishDeviceID?: string
                /** @description 惩罚惩罚类型 */
                punishType?: string
                /** @description 惩罚惩罚时间 */
                punishPunishTimeOnChain?: string
                /** @description 惩罚ID */
                punishID?: string
              }[]
            }
          }
        }
      }
    }
  }
}

export interface operations {}

export interface external {}

export type BrowserDetailExtrinsicEventRecordsGetParams =
  paths['/browser/detail/extrinsicEventRecords']['get']['parameters']['query']
export type BrowserDetailExtrinsicEventRecords =
  paths['/browser/detail/extrinsicEventRecords']['get']['responses'][200]['schema']['data']
export type BrowserDetailExtrinsicBaseInfosGetParams =
  paths['/browser/detail/extrinsicBaseInfos']['get']['parameters']['query']
export type BrowserDetailExtrinsicBaseInfos =
  paths['/browser/detail/extrinsicBaseInfos']['get']['responses'][200]['schema']['data']
export type BrowserNodeNextUpsGetParams =
  paths['/browser/node/nextUps']['get']['parameters']['query']
export type BrowserNodeNextUps =
  paths['/browser/node/nextUps']['get']['responses'][200]['schema']['data']
export type BrowserVerifiedNodesGetParams =
  paths['/browser/verified/nodes']['get']['parameters']['query']
export type BrowserVerifiedNodes =
  paths['/browser/verified/nodes']['get']['responses'][200]['schema']['data']
export type BrowserTickRecordsGetParams =
  paths['/browser/tickRecords']['get']['parameters']['query']
export type BrowserTickRecords =
  paths['/browser/tickRecords']['get']['responses'][200]['schema']['data']
export type BrowserDetailBlockEventRecordsGetParams =
  paths['/browser/detail/blockEventRecords']['get']['parameters']['query']
export type BrowserDetailBlockEventRecords =
  paths['/browser/detail/blockEventRecords']['get']['responses'][200]['schema']['data']
export type BrowserDetailBlockExtrinsicRecordsGetParams =
  paths['/browser/detail/blockExtrinsicRecords']['get']['parameters']['query']
export type BrowserDetailBlockExtrinsicRecords =
  paths['/browser/detail/blockExtrinsicRecords']['get']['responses'][200]['schema']['data']
export type BrowserDetailBlockBaseInfosGetParams =
  paths['/browser/detail/blockBaseInfos']['get']['parameters']['query']
export type BrowserDetailBlockBaseInfos =
  paths['/browser/detail/blockBaseInfos']['get']['responses'][200]['schema']['data']
export type BrowserBlockChainEventRecordsGetParams =
  paths['/browser/blockChain/eventRecords']['get']['parameters']['query']
export type BrowserBlockChainEventRecords =
  paths['/browser/blockChain/eventRecords']['get']['responses'][200]['schema']['data']
export type BrowserBlockChainExtrinsicRecordsGetParams =
  paths['/browser/blockChain/extrinsicRecords']['get']['parameters']['query']
export type BrowserBlockChainExtrinsicRecords =
  paths['/browser/blockChain/extrinsicRecords']['get']['responses'][200]['schema']['data']
export type BrowserBlockChainBlockInfosGetParams =
  paths['/browser/blockChain/blockInfos']['get']['parameters']['query']
export type BrowserBlockChainBlockInfos =
  paths['/browser/blockChain/blockInfos']['get']['responses'][200]['schema']['data']
export type BrowserBlockChainAccountRecordsGetParams =
  paths['/browser/blockChain/accountRecords']['get']['parameters']['query']
export type BrowserBlockChainAccountRecords =
  paths['/browser/blockChain/accountRecords']['get']['responses'][200]['schema']['data']
export type BrowserSearchGetParams =
  paths['/browser/search']['get']['parameters']['query']
export type BrowserSearch =
  paths['/browser/search']['get']['responses'][200]['schema']['data']
export type BrowserTxHashGetParams =
  paths['/browser/txHash']['get']['parameters']['query']
export type BrowserTxHash =
  paths['/browser/txHash']['get']['responses'][200]['schema']['data']
export type BrowserDetailValidatorBaseInfosGetParams =
  paths['/browser/detail/validatorBaseInfos']['get']['parameters']['query']
export type BrowserDetailValidatorBaseInfos =
  paths['/browser/detail/validatorBaseInfos']['get']['responses'][200]['schema']['data']
export type BrowserDetailValidatorNominatorInfosGetParams =
  paths['/browser/detail/validatorNominatorInfos']['get']['parameters']['query']
export type BrowserDetailValidatorNominatorInfos =
  paths['/browser/detail/validatorNominatorInfos']['get']['responses'][200]['schema']['data']
export type BrowserCustomerDataGetParams =
  paths['/browser/customerData']['get']['parameters']
export type BrowserCustomerData =
  paths['/browser/customerData']['get']['responses'][200]['schema']['data']
export type BrowserTimeSeriesGetParams =
  paths['/browser/timeSeries']['get']['parameters']['query']
export type BrowserTimeSeries =
  paths['/browser/timeSeries']['get']['responses'][200]['schema']['data']
export type BrowserDetailAccountBaseInfosGetParams =
  paths['/browser/detail/accountBaseInfos']['get']['parameters']['query']
export type BrowserDetailAccountBaseInfos =
  paths['/browser/detail/accountBaseInfos']['get']['responses'][200]['schema']['data']
export type BrowserDetailAccountNominatorsGetParams =
  paths['/browser/detail/accountNominators']['get']['parameters']['query']
export type BrowserDetailAccountNominators =
  paths['/browser/detail/accountNominators']['get']['responses'][200]['schema']['data']
export type BrowserDetailAccountExtrinsicsGetParams =
  paths['/browser/detail/accountExtrinsics']['get']['parameters']['query']
export type BrowserDetailAccountExtrinsics =
  paths['/browser/detail/accountExtrinsics']['get']['responses'][200]['schema']['data']
export type BrowserDetailAccountAssetInfosGetParams =
  paths['/browser/detail/accountAssetInfos']['get']['parameters']['query']
export type BrowserDetailAccountAssetInfos =
  paths['/browser/detail/accountAssetInfos']['get']['responses'][200]['schema']['data']
export type BrowserDetailAccountEdgeAssetInfosGetParams =
  paths['/browser/detail/accountEdgeAssetInfos']['get']['parameters']['query']
export type BrowserDetailAccountEdgeAssetInfos =
  paths['/browser/detail/accountEdgeAssetInfos']['get']['responses'][200]['schema']['data']
export type BrowserDetailAccountTransactionsGetParams =
  paths['/browser/detail/accountTransactions']['get']['parameters']['query']
export type BrowserDetailAccountTransactions =
  paths['/browser/detail/accountTransactions']['get']['responses'][200]['schema']['data']
export type BrowserHomeTransferPreviewGetParams =
  paths['/browser/home/transferPreview']['get']['parameters']['query']
export type BrowserHomeTransferPreview =
  paths['/browser/home/transferPreview']['get']['responses'][200]['schema']['data']
export type BrowserHomeNetworkPreviewGetParams =
  paths['/browser/home/networkPreview']['get']['parameters']
export type BrowserHomeNetworkPreview =
  paths['/browser/home/networkPreview']['get']['responses'][200]['schema']['data']
export type BrowserHomeBlocksPreviewGetParams =
  paths['/browser/home/blocksPreview']['get']['parameters']['query']
export type BrowserHomeBlocksPreview =
  paths['/browser/home/blocksPreview']['get']['responses'][200]['schema']['data']
export type BrowserNodeValidatorsGetParams =
  paths['/browser/node/validators']['get']['parameters']
export type BrowserNodeValidators =
  paths['/browser/node/validators']['get']['responses'][200]['schema']['data']
export type BridgeRemarkGetParams =
  paths['/bridge/remark']['get']['parameters']['query']
export type BridgeRemark =
  paths['/bridge/remark']['get']['responses'][200]['schema']['data']
export type BridgeRemarkPutParams =
  paths['/bridge/remark']['put']['parameters']['body']['root']
export type BridgeRemarkPostParams =
  paths['/bridge/remark']['post']['parameters']['body']['root']
export type BridgeBridgeCacheGetParams =
  paths['/bridge/bridge-cache']['get']['parameters']['query']
export type BridgeBridgeCache =
  paths['/bridge/bridge-cache']['get']['responses'][200]['schema']['data']
export type BridgeBridgeCachePutParams =
  paths['/bridge/bridge-cache']['put']['parameters']['body']['root']
export type BridgeBridgeCachePostParams =
  paths['/bridge/bridge-cache']['post']['parameters']['body']['root']
export type BridgeBridgeCacheDeleteParams =
  paths['/bridge/bridge-cache']['delete']['parameters']['body']['root']
export type BridgeCommitteesGetParams =
  paths['/bridge/committees']['get']['parameters']['query']
export type BridgeCommittees =
  paths['/bridge/committees']['get']['responses'][200]['schema']['data']
export type BridgeCrossBridgesGetParams =
  paths['/bridge/cross-bridges']['get']['parameters']['query']
export type BridgeCrossBridges =
  paths['/bridge/cross-bridges']['get']['responses'][200]['schema']['data']
export type BridgeCrossBridgeGetParams =
  paths['/bridge/cross-bridge']['get']['parameters']['query']
export type BridgeCrossBridge =
  paths['/bridge/cross-bridge']['get']['responses'][200]['schema']['data']
export type BridgeSupportChainsGetParams =
  paths['/bridge/support-chains']['get']['parameters']
export type BridgeSupportChains =
  paths['/bridge/support-chains']['get']['responses'][200]['schema']['data']
export type BridgeAnchorReadyCheckGetParams =
  paths['/bridge/anchor-ready:check']['get']['parameters']['query']
export type BridgeAnchorReadyCheck =
  paths['/bridge/anchor-ready:check']['get']['responses'][200]['schema']['data']
export type BridgeBridgeBrowserTxsGetParams =
  paths['/bridge/bridge-browser-txs']['get']['parameters']['query']
export type BridgeBridgeBrowserTxs =
  paths['/bridge/bridge-browser-txs']['get']['responses'][200]['schema']['data']
export type BridgeBridgeBrowserTxDetailGetParams =
  paths['/bridge/bridge-browser-tx:detail']['get']['parameters']['query']
export type BridgeBridgeBrowserTxDetail =
  paths['/bridge/bridge-browser-tx:detail']['get']['responses'][200]['schema']['data']
export type BridgeBridgeBrowserBridgesGetParams =
  paths['/bridge/bridge-browser-bridges']['get']['parameters']['query']
export type BridgeBridgeBrowserBridges =
  paths['/bridge/bridge-browser-bridges']['get']['responses'][200]['schema']['data']
export type BridgeBridgeBrowserBridges2GetParams =
  paths['/bridge/bridge-browser-bridges2']['get']['parameters']['query']
export type BridgeBridgeBrowserBridges2 =
  paths['/bridge/bridge-browser-bridges2']['get']['responses'][200]['schema']['data']
export type BridgeBridgeBrowserHomeGetParams =
  paths['/bridge/bridge-browser-home']['get']['parameters']
export type BridgeBridgeBrowserHome =
  paths['/bridge/bridge-browser-home']['get']['responses'][200]['schema']['data']
export type SwapPoolsGetParams = paths['/swap/pools']['get']['parameters']
export type SwapPools =
  paths['/swap/pools']['get']['responses'][200]['schema']['data']
export type SwapJoinedPoolsGetParams =
  paths['/swap/joined-pools']['get']['parameters']['query']
export type SwapJoinedPools =
  paths['/swap/joined-pools']['get']['responses'][200]['schema']['data']
export type SwapSwapRecordsGetParams =
  paths['/swap/swap-records']['get']['parameters']['query']
export type SwapSwapRecords =
  paths['/swap/swap-records']['get']['responses'][200]['schema']['data']
export type SwapSwapRecordGetParams =
  paths['/swap/swap-record']['get']['parameters']['query']
export type SwapSwapRecord =
  paths['/swap/swap-record']['get']['responses'][200]['schema']['data']
export type SwapSwapRecordPostParams =
  paths['/swap/swap-record']['post']['parameters']['body']['root']
export type SwapGasGetParams = paths['/swap:gas']['get']['parameters']['query']
export type SwapGas =
  paths['/swap:gas']['get']['responses'][200]['schema']['data']
export type SwapContractDetailsGetParams =
  paths['/swap:contract-details']['get']['parameters']
export type SwapContractDetails =
  paths['/swap:contract-details']['get']['responses'][200]['schema']['data']
export type SwapChainDetailsGetParams =
  paths['/swap:chain-details']['get']['parameters']
export type SwapChainDetails =
  paths['/swap:chain-details']['get']['responses'][200]['schema']['data']
export type SwapUserTokenBalanceGetParams =
  paths['/swap:user-token-balance']['get']['parameters']['query']
export type SwapUserTokenBalance =
  paths['/swap:user-token-balance']['get']['responses'][200]['schema']['data']
export type SwapExchangeRateGetParams =
  paths['/swap:exchange-rate']['get']['parameters']['query']
export type SwapExchangeRate =
  paths['/swap:exchange-rate']['get']['responses'][200]['schema']['data']
export type NodeValidatorsGetParams =
  paths['/node/validators']['get']['parameters']['query']
export type NodeValidators =
  paths['/node/validators']['get']['responses'][200]['schema']['data']
export type NodeEpochInfoGetParams =
  paths['/node/epoch-info']['get']['parameters']
export type NodeEpochInfo =
  paths['/node/epoch-info']['get']['responses'][200]['schema']['data']
export type NodeEraInfoGetParams = paths['/node/era-info']['get']['parameters']
export type NodeEraInfo =
  paths['/node/era-info']['get']['responses'][200]['schema']['data']
export type NodeCheckVirtualAccountCreationGetParams =
  paths['/node/check-virtual-account-creation']['get']['parameters']['query']
export type NodeCheckVirtualAccountCreation =
  paths['/node/check-virtual-account-creation']['get']['responses'][200]['schema']['data']
export type BlockchainProviderInfoGetParams =
  paths['/blockchain/provider:info']['get']['parameters']['query']
export type BlockchainProviderInfo =
  paths['/blockchain/provider:info']['get']['responses'][200]['schema']['data']
export type BlockchainProvidersGetParams =
  paths['/blockchain/providers']['get']['parameters']['query']
export type BlockchainProviders =
  paths['/blockchain/providers']['get']['responses'][200]['schema']['data']
export type BlockchainRewardsGetParams =
  paths['/blockchain/rewards']['get']['parameters']['query']
export type BlockchainRewards =
  paths['/blockchain/rewards']['get']['responses'][200]['schema']['data']
export type BlockchainDevicesGetParams =
  paths['/blockchain/devices']['get']['parameters']['query']
export type BlockchainDevices =
  paths['/blockchain/devices']['get']['responses'][200]['schema']['data']
export type BlockchainDeviceInfoGetParams =
  paths['/blockchain/device:info']['get']['parameters']['query']
export type BlockchainDeviceInfo =
  paths['/blockchain/device:info']['get']['responses'][200]['schema']['data']
export type BlockchainClaimsGetParams =
  paths['/blockchain/claims']['get']['parameters']['query']
export type BlockchainClaims =
  paths['/blockchain/claims']['get']['responses'][200]['schema']['data']
export type BlockchainPunishsGetParams =
  paths['/blockchain/punishs']['get']['parameters']['query']
export type BlockchainPunishs =
  paths['/blockchain/punishs']['get']['responses'][200]['schema']['data']
